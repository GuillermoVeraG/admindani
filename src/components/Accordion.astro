---
import type AccordionItem from "@/components/AccordionItem.astro";

interface Props {
  children: typeof AccordionItem | (typeof AccordionItem)[];
}
---

<div class="accordion">
  <ul class="accordion__wrapper">
    <slot />
  </ul>
</div>

<script type="module">
  // variables
  const accordionItems = [...document.querySelectorAll(".accordion__item")];

  // functions
  const getPanelHeight = (accordionItem) => {
    const accordionInner = accordionItem.querySelector(".panel__inner");
    return accordionInner.getBoundingClientRect().height;
  };

  const openAccordionItem = (accordionItem) => {
    const accordionItemHeader =
      accordionItem.querySelector(".accordion__header");
    const accordionToggleIndicator = accordionItem.querySelector(
      ".header__toggle-indicator-personal"
    );
    const accordionPanel = accordionItem.querySelector(".accordion__panel");

    accordionPanel.style.height = `${getPanelHeight(accordionItem)}px`;
    accordionItem.classList.add("is-active");
    accordionItemHeader.setAttribute("aria-expanded", true);
    accordionToggleIndicator.classList.remove(
      "header__toggle-indicator-rotate"
    );
  };

  const closeAccordionItem = (accordionItem) => {
    const accordionItemHeader =
      accordionItem.querySelector(".accordion__header");
    const accordionToggleIndicator = accordionItem.querySelector(
      ".header__toggle-indicator-personal"
    );
    const accordionPanel = accordionItem.querySelector(".accordion__panel");

    accordionItem.classList.remove("is-active");
    accordionPanel.style.height = 0;
    accordionItemHeader.focus();
    accordionItemHeader.setAttribute("aria-expanded", false);
    accordionToggleIndicator.classList.add("header__toggle-indicator-rotate");
  };

  const isAccordionOpen = (accordionItem) => {
    return accordionItem.classList.contains("is-active");
  };

  function toggleAccordionItem() {
    const accordionItem = event.target.closest(".accordion__item");
    if (!accordionItem || event.target.closest(".accordion__panel")) return;

    isAccordionOpen(accordionItem)
      ? closeAccordionItem(accordionItem)
      : openAccordionItem(accordionItem);
  }

  function recalculateHeight() {
    const toggledAccordionItems = accordionItems.filter((element) =>
      element.classList.contains("is-active")
    );

    toggledAccordionItems.forEach((toggledAccordionItem) => {
      const accordionPanel =
        toggledAccordionItem.querySelector(".accordion__panel");
      accordionPanel.style.height = `${getPanelHeight(toggledAccordionItem)}px`;
    });
  }

  // execution
  accordionItems.forEach((item, index) => {
    const accordionItemHeader = item.querySelector(".accordion__header");
    const accordionItemPanel = item.querySelector(".accordion__panel");

    accordionItemHeader.setAttribute("id", `accordion-item${index + 1}`);
    accordionItemPanel.setAttribute("id", `item${index + 1}`);

    accordionItemHeader.setAttribute("aria-controls", `item${index + 1}`);
    accordionItemPanel.setAttribute(
      "aria-labelledby",
      `accordion-item${index + 1}`
    );
  });

  window.toggleAccordionItem = toggleAccordionItem;
  window.onresize = recalculateHeight;
</script>

<style is:global>
  .accordion__wrapper {
    list-style: none;
    padding: 0;
  }
</style>
